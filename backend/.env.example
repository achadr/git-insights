# ================================
# GitInsights Backend Configuration
# ================================
#
# SETUP INSTRUCTIONS:
# 1. Copy this file to .env: cp .env.example .env
# 2. Replace all placeholder values with your actual credentials
# 3. NEVER commit your .env file to version control
#
# SECURITY NOTICE:
# - Keep your API keys secret and secure
# - Rotate keys immediately if they are exposed
# - Use different keys for development and production
# - Never share your .env file or commit it to git
#

# ================================
# Server Configuration
# ================================

# Environment: development, production, test
NODE_ENV=development

# Port for the Express server
PORT=3000

# ================================
# Anthropic API Configuration
# ================================
#
# Required for AI-powered code analysis
# Get your API key: https://console.anthropic.com/settings/keys
#
# Steps to obtain:
# 1. Sign up at https://console.anthropic.com/
# 2. Navigate to API Keys section
# 3. Create a new API key
# 4. Copy and paste below
#
ANTHROPIC_API_KEY=your-anthropic-api-key-here

# Model to use for analysis (default: claude-3-5-haiku-20241022)
# Options: claude-3-5-haiku-20241022, claude-3-5-sonnet-20241022, claude-3-opus-20240229
ANTHROPIC_MODEL=claude-3-5-haiku-20241022

# ================================
# GitHub API Configuration
# ================================
#
# Required for fetching repository data
# Create token: https://github.com/settings/tokens
#
# Steps to obtain:
# 1. Go to GitHub Settings > Developer settings > Personal access tokens
# 2. Click "Generate new token (classic)"
# 3. Give it a descriptive name (e.g., "GitInsights Development")
# 4. Select scopes:
#    - repo (Full control of private repositories)
#    - read:user (Read user profile data)
# 5. Generate token and copy it
# 6. Paste below
#
# IMPORTANT: Classic tokens recommended for this application
#
GITHUB_TOKEN=your-github-personal-access-token-here

# ================================
# Redis Configuration
# ================================
#
# Optional: Used for rate limiting and caching
# If not configured, in-memory storage will be used
#
# Local development: redis://localhost:6379
# Docker: redis://redis:6379
# Remote: redis://username:password@host:port
#
REDIS_URL=redis://localhost:6379

# ================================
# Rate Limiting Configuration
# ================================
#
# Number of requests allowed in the time window
# Free tier: 5 requests per day (recommended for development)
# Paid tier: 100 requests per day
RATE_LIMIT_FREE_TIER=5
RATE_LIMIT_PAID_TIER=100

# Time window in milliseconds (default: 86400000 = 24 hours)
RATE_LIMIT_WINDOW_MS=86400000

# ================================
# CORS Configuration
# ================================
#
# Comma-separated list of allowed origins
# Development: http://localhost:5173,http://localhost:5174
# Production: https://yourdomain.com,https://www.yourdomain.com
#
ALLOWED_ORIGINS=http://localhost:5174

# ================================
# Optional Advanced Configuration
# ================================

# Maximum request body size (default: 10mb)
# REQUEST_SIZE_LIMIT=10mb

# Request timeout in milliseconds (default: 30000 = 30 seconds)
# REQUEST_TIMEOUT_MS=30000

# ================================
# Troubleshooting
# ================================
#
# Server won't start?
# - Ensure ANTHROPIC_API_KEY is set and valid
# - Ensure GITHUB_TOKEN is set and valid
# - Check that PORT is not already in use
#
# Rate limiting not working?
# - Ensure Redis is running if REDIS_URL is set
# - Check Redis connection with: redis-cli ping
#
# CORS errors?
# - Ensure frontend URL is in ALLOWED_ORIGINS
# - Check protocol (http vs https) matches exactly
#
# API errors?
# - Verify API keys are valid and not expired
# - Check API key permissions and scopes
# - Review logs in console for detailed error messages
#
